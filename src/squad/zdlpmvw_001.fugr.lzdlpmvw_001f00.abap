*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZDLPMVW_001.....................................*
FORM GET_DATA_ZDLPMVW_001.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZDLPMT_004 WHERE
(VIM_WHERETAB) .
    CLEAR ZDLPMVW_001 .
ZDLPMVW_001-MANDT =
ZDLPMT_004-MANDT .
ZDLPMVW_001-ID =
ZDLPMT_004-ID .
ZDLPMVW_001-DESCRICAO =
ZDLPMT_004-DESCRICAO .
<VIM_TOTAL_STRUC> = ZDLPMVW_001.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZDLPMVW_001 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZDLPMVW_001.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZDLPMVW_001-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZDLPMT_004 WHERE
  ID = ZDLPMVW_001-ID .
    IF SY-SUBRC = 0.
    DELETE ZDLPMT_004 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZDLPMT_004 WHERE
  ID = ZDLPMVW_001-ID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZDLPMT_004.
    ENDIF.
ZDLPMT_004-MANDT =
ZDLPMVW_001-MANDT .
ZDLPMT_004-ID =
ZDLPMVW_001-ID .
ZDLPMT_004-DESCRICAO =
ZDLPMVW_001-DESCRICAO .
    IF SY-SUBRC = 0.
    UPDATE ZDLPMT_004 ##WARN_OK.
    ELSE.
    INSERT ZDLPMT_004 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZDLPMVW_001-UPD_FLAG,
STATUS_ZDLPMVW_001-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZDLPMVW_001.
  SELECT SINGLE * FROM ZDLPMT_004 WHERE
ID = ZDLPMVW_001-ID .
ZDLPMVW_001-MANDT =
ZDLPMT_004-MANDT .
ZDLPMVW_001-ID =
ZDLPMT_004-ID .
ZDLPMVW_001-DESCRICAO =
ZDLPMT_004-DESCRICAO .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZDLPMVW_001 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZDLPMVW_001-ID TO
ZDLPMT_004-ID .
MOVE ZDLPMVW_001-MANDT TO
ZDLPMT_004-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZDLPMT_004'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZDLPMT_004 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZDLPMT_004'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
